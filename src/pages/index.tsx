import Head from 'next/head'
import { ChangeEvent, useRef, useState } from 'react';
import { ZodRawShape, z } from "zod";

const formSchema = z.object({
  nome: z.string().min(3, 'Nome deve ter no mínimo 3 caracteres.'),
  sobrenome: z.string(),
  senha: z.string(),
  confirmar_senha: z.string()
}).refine(data => data.senha === data.confirmar_senha, {
  message: "Senha e confirmação de senha não são iguais.",
  path: ['confirmar_senha']
});

type FormSchemaType = z.infer<typeof formSchema>;

export default function Home() {
  const formData = useRef<FormSchemaType>({
    nome: '',
    sobrenome: '',
    senha: '',
    confirmar_senha: ''
  });

  const [formErrors, setFormErrors] = useState<Partial<FormSchemaType>>({});

  function handleSubmit(e: ChangeEvent<HTMLFormElement>) {
    console.log(formData.current);
    e.preventDefault();
    try {
      formSchema.parse(formData.current);
      setFormErrors({});
      console.log("Passou")
    } catch (error) {
      console.log("Erro")
      if (error instanceof z.ZodError) {
        const errorMap = error.formErrors.fieldErrors;
        setFormErrors(errorMap);
      }
    }
  }

  function handleChange(e: ChangeEvent<HTMLInputElement>) {
    formData.current = {
      ...formData.current,
      [e.target.name]: e.target.value
    };

  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '100vh', gap: '10px' }}>
          <input type="text" name="nome" placeholder='Nome' onChange={handleChange} />
          {formErrors.nome && <p style={{ color: 'red' }}>{formErrors.nome}</p>}
          <input type="text" name="sobrenome" placeholder='Sobrenome' onChange={handleChange} />
          {formErrors.sobrenome && <p style={{ color: 'red' }}>{formErrors.sobrenome}</p>}
          <input type="text" name="senha" placeholder='Senha' onChange={handleChange} />
          {formErrors.senha && <p style={{ color: 'red' }}>{formErrors.senha}</p>}
          <input type="text" name="confirmar_senha" placeholder='Confirmar Senha' onChange={handleChange} />
          {formErrors.confirmar_senha && <p style={{ color: 'red' }}>{formErrors.confirmar_senha}</p>}
          <input type="submit" value="Enviar" />
        </form>
      </main>
    </>
  )
}
